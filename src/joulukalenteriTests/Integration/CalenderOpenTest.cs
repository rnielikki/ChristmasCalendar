using System.Threading.Tasks;
using Xunit;
using joulukalenteri.Client.SharedCode;
using joulukalenteri.Shared;
using joulukalenteri.Server.Controllers;
using System.Linq;

namespace joulukalenteriTests.Integration
{
    public class CalendarOpenTest : IClassFixture<WebFactory<joulukalenteri.Server.Startup>>
    {
        private readonly WebFactory<joulukalenteri.Server.Startup> _factory;
        private string url;
        public CalendarOpenTest(WebFactory<joulukalenteri.Server.Startup> factory) {
            _factory = factory;
            url = _factory.Server.BaseAddress.ToString();
        }
        [Fact]
        public async Task ReadAndParseTest(){
            var client = _factory.CreateClient();
            int day = 5;
            DayReader reader = new DayReader(new DataReceiver(client));

            DayInfoData data = await reader.GetContent(2018,5, _factory.Server.BaseAddress.ToString());
            
            Assert.Equal("Insert Your title here.", data?.Title);
            Assert.Equal("asdf", data?.Summary);
            Assert.Equal(day, data?.Day);

            DayInfoData noTitleData = await reader.GetContent(2018, 11, _factory.Server.BaseAddress.ToString());
            Assert.Equal("Day 11",noTitleData?.Title);
            Assert.Equal(string.Concat(Enumerable.Repeat("loremipsum",(int)(DayInfoData.SummaryLength/10)))+"...", noTitleData?.Summary);

            DayInfoData failedData = await reader.GetContent(2099, 9, _factory.Server.BaseAddress.ToString());
            Assert.Equal(DayReaderController.WrongDateMessage, failedData.Summary);

            DayInfoData readFailedData = await reader.GetContent(2015, 6, _factory.Server.BaseAddress.ToString());
            Assert.Equal(DayReaderController.NotFoundMessage, readFailedData.Summary);

            //response.EnsureSuccessStatusCode();
            //string test = await response.Content.ReadAsStringAsync();
            //Assert.NotEqual("{\"2018\":[]}", test);
        }
    }
}
